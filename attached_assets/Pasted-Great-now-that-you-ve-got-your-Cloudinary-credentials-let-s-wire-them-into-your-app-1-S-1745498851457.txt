Great—now that you’ve got your Cloudinary credentials, let’s wire them into your app:

---

### 1. Store your Cloudinary URL in Replit secrets

1. In your Replit workspace, open **Secrets (Environment Variables)**.  
2. Add a new secret named `CLOUDINARY_URL` with the value:
   ```
   cloudinary://471719932714117:y_YmVSpkaNDxCybGhgKp5gVH48M@dwmolc54p
   ```
3. (Optional) You may also set `CLOUDINARY_CLOUD_NAME`, `CLOUDINARY_API_KEY`, and `CLOUDINARY_API_SECRET` individually, but `CLOUDINARY_URL` alone is enough.

---

### 2. Create a Cloudinary client module

Create (or replace) `server/lib/cloudinary.ts`:

```ts
import { v2 as cloudinary } from "cloudinary";

// If you set CLOUDINARY_URL, you don't need to configure each value separately
// The SDK will parse it automatically.
cloudinary.config({
  secure: true,
  // If you prefer, you can also do:
//  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
//  api_key:    process.env.CLOUDINARY_API_KEY,
//  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export default cloudinary;
```

---

### 3. Update your Express upload endpoints

#### A) Multer setup (in `server/middleware/upload.ts` for example)

```ts
import multer from "multer";

// Keep files in memory so we can stream them directly to Cloudinary
export const upload = multer({ storage: multer.memoryStorage() });
```

#### B) `/api/profile` route (replace existing Replit-storage logic)

```ts
import { Router } from "express";
import { Readable } from "stream";
import cloudinary from "@/lib/cloudinary";
import { upload } from "@/middleware/upload";
import { db, users } from "@db/schema";
import { eq } from "drizzle-orm";

const router = Router();

router.post("/api/profile", upload.single("image"), async (req, res, next) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "No file provided" });
    }

    // Stream the buffer into Cloudinary
    const bufferStream = new Readable();
    bufferStream.push(req.file.buffer);
    bufferStream.push(null);

    const result = await new Promise<cloudinary.UploadApiResponse>((resolve, reject) => {
      const stream = cloudinary.uploader.upload_stream(
        { folder: `profiles/${req.user.id}` },
        (error, result) => (error ? reject(error) : resolve(result!))
      );
      bufferStream.pipe(stream);
    });

    const imageUrl = result.secure_url;

    // Persist URL in the database
    const [updatedUser] = await db
      .update(users)
      .set({ profileImage: imageUrl })
      .where(eq(users.id, req.user.id))
      .returning();

    res.json({ user: updatedUser });
  } catch (err) {
    next(err);
  }
});
```

#### C) `/api/events` route (same pattern)

```ts
router.post("/api/events", upload.single("image"), async (req, res, next) => {
  try {
    // Authenticate user...
    // Stream the file to Cloudinary
    const bufferStream = new Readable();
    bufferStream.push(req.file.buffer);
    bufferStream.push(null);

    const result = await new Promise<cloudinary.UploadApiResponse>((resolve, reject) => {
      const stream = cloudinary.uploader.upload_stream(
        { folder: `events/${req.user.id}` },
        (error, result) => (error ? reject(error) : resolve(result!))
      );
      bufferStream.pipe(stream);
    });

    const imageUrl = result.secure_url;

    // Insert your event into the DB, using imageUrl
    const [newEvent] = await db
      .insert(events)
      .values({
        ...req.body,
        image: imageUrl,
        creatorId: req.user.id,
      })
      .returning();

    res.status(201).json({ success: true, event: newEvent });
  } catch (err) {
    next(err);
  }
});
```

---

### 4. Front-end: render the returned URLs

In your React pages (profile edit, create event, test page), remove any manual URL construction and use the `imageUrl` field straight from your API response:

```tsx
// After POST /api/profile or /api/events
const { user } = await response.json();
// user.profileImage now contains the secure_url

// Render it:
<img src={user.profileImage} alt="Profile" className="object-cover" />;
```

---

### 5. Test end-to-end

1. **Restart** your server so it picks up the new `CLOUDINARY_URL` secret.  
2. **Upload** a profile image or event photo.  
3. **Check** your Cloudinary dashboard → **Media Library**; the file should appear there.  
4. **Verify** in the UI that your new image URL renders correctly (no more 404s).  

That completes the Cloudinary integration—your uploads are now persisted on Cloudinary’s CDN and should render immediately everywhere in your app.